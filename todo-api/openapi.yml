openapi: 3.0.0
info:
  version: 1.0.0
  title: App Todo API
servers:
  - url: 'http://localhost:3000'
paths:
  /:
    get:
      summary: List todos
      description: Returns list of todos
      responses:
        200:
          description: '200 response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        500:
          description: '500 response'
          content: {}
    x-amazon-apigateway-integration:
      uri:
      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTodoFunction.Arn}/invocations
      responses:
        default:
          statusCode: 200
      passthroughBehavior: when_no_match
      httpMethod: POST
      contentHandling: CONVERT_TO_TEXT
      type: aws_proxy
    post:
      summary: Create task
      description: Creates a new todo
      requestBody:
        description: todo information to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        201:
          description: '201 response'
          content: {}
        400:
          description: '400 response'
          content: {}
        500:
          description: '500 response'
          content: {}
      x-amazon-apigateway-integration:
        uri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTodoFunction.Arn}/invocations
        responses:
          default:
            statusCode: 201
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
  /{id}:
    get:
      summary: Get todo
      description: Returns one specific todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: '200 response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        404:
          description: '404 response'
          content: {}
        500:
          description: '500 response'
          content: {}
      x-amazon-apigateway-integration:
        uri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTodoFunction.Arn}/invocations
        responses:
        default:
          statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    put:
      summary: Update todo
      description: Updates one specific todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: '200 response'
          content: {}
        400:
          description: '400 response'
          content: {}
        404:
          description: '404 response'
          content: {}
        500:
          description: '500 response'
          content: {}
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTodoFunction.Arn}/invocations
        responses:
          default:
            statusCode: 200
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    delete:
      summary: Delete todo
      description: Delete one specific todo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: '200 response'
          content: {}
        500:
          description: '500 response'
          content: {}
    x-amazon-apigateway-integration:
      uri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTodoFunction.Arn}/invocations
      responses:
        default:
          statusCode: 200
      passthroughBehavior: when_no_match
      httpMethod: POST
      contentHandling: CONVERT_TO_TEXT
      type: aws_proxy

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
